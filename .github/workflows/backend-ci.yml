name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: legal_intel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run ruff linter
      working-directory: ./backend
      run: |
        echo "üîç Running ruff linter..."
        ruff check . --output-format=github
        echo "‚úÖ Ruff linting passed!"

    - name: Run ruff formatter check
      working-directory: ./backend
      run: |
        echo "üé® Checking code formatting with ruff..."
        ruff format --check .
        echo "‚úÖ Code formatting is correct!"

    - name: Run isort import sorting check
      working-directory: ./backend
      run: |
        echo "üì¶ Checking import sorting with isort..."
        isort . --check-only --diff
        echo "‚úÖ Import sorting is correct!"

    - name: Run type checking with mypy
      working-directory: ./backend
      run: |
        echo "üîç Running type checking with mypy..."
        mypy app/ --ignore-missing-imports
        echo "‚úÖ Type checking passed!"

    - name: Run tests
      working-directory: ./backend
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: legal_intel_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        SECRET_KEY: test-secret-key-for-ci
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        echo "üß™ Running tests..."
        python -m pytest tests/ -v --cov=app --cov-report=xml
        echo "‚úÖ All tests passed!"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Security scan with bandit
      working-directory: ./backend
      run: |
        echo "üîí Running security scan with bandit..."
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -ll
        echo "‚úÖ Security scan completed!"

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: backend/bandit-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: legal-intel-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        echo "üê≥ Testing Docker image..."
        docker run --rm legal-intel-backend:latest python -c "import app; print('‚úÖ Backend imports successfully')"
        echo "‚úÖ Docker image test passed!"

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Check for security vulnerabilities
      working-directory: ./backend
      run: |
        echo "üîç Checking for security vulnerabilities..."
        safety check -r requirements.txt
        echo "‚úÖ No security vulnerabilities found!"

    - name: Check for outdated dependencies
      working-directory: ./backend
      run: |
        echo "üì¶ Checking for outdated dependencies..."
        pip list --outdated || true
        echo "‚úÖ Dependency check completed!"


