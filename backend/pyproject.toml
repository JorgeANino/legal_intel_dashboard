[project]
name = "legal-intel-dashboard"
version = "1.0.0"
description = "Production-grade legal document intelligence platform"
requires-python = ">=3.11"

[tool.ruff]
# Exclude common directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "alembic/versions",
    "uploads",
]

# Line length to match Black's default
line-length = 100

# Python version
target-version = "py311"

[tool.ruff.lint]
# Enable pycodestyle (E, W), Pyflakes (F), isort (I), and other rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (we use 100 but allow some flexibility)
    "B008",  # Do not perform function calls in argument defaults (FastAPI Depends pattern is standard)
    "B904",  # Within an except clause, raise exceptions with raise ... from err (optional for clarity)
    "N802",  # Property names like DATABASE_URL intentionally uppercase to match env vars
]

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Ignore unused imports in __init__.py files

[tool.ruff.lint.isort]
# Group imports
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = ["app"]
lines-after-imports = 2

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Use Unix-style line endings
line-ending = "lf"

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
plugins = ["pydantic.mypy"]
# Allow Any return types (common with LLM responses and dynamic data)
allow_untyped_defs = true
# Don't error on missing type stubs for third-party libraries
warn_unused_ignores = false
# Allow untyped imports (e.g., redis, other libraries without type stubs)
disallow_untyped_calls = false
warn_no_return = false
# Ignore specific error codes
disable_error_code = ["import-untyped"]

[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_errors = true

[[tool.mypy.overrides]]
module = ["app.services.*"]
# Services often work with dynamic data (LLM responses, metadata extraction) and SQLAlchemy models
warn_return_any = false
disallow_any_explicit = false
disable_error_code = ["assignment", "arg-type", "index", "return-value", "var-annotated"]

[[tool.mypy.overrides]]
module = ["app.middleware.*"]
# Middleware uses external libraries that may not have complete type stubs
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["app.tasks.*", "app.api.v1.endpoints.*", "app.core.websocket_manager"]
# Tasks, endpoints, and websocket work with SQLAlchemy models where Column attributes resolve to actual values at runtime
disable_error_code = ["assignment", "arg-type", "index", "return-value"]
